---
title: "Exploring EEG data"
author: "Cameron Roach"
date: "2018-12-29T02:13:00"
slug: eeg-explore
categories: ["R"]
tags: ["R", "EEG"]
description: Exploring EEG data from the Grasp-and-Lift EEG Detection Kaggle competition.
draft: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	message = FALSE,
	warning = FALSE,
	collapse = TRUE
)

rm(list=ls())

data_dir <- file.path(Sys.getenv("DATA"), "kaggle-eeg")
```

Electroencephalographic (EEG) sensors record electrical activity in the brain. It is a non-invasive technique and has applications in medicine, gaming __TODO__:REF.

## Data

The data is taken from the [Grasp-and-Lift EEG Detection](https://www.kaggle.com/c/grasp-and-lift-eeg-detection) Kaggle competition. 32 channel EEG data was collected from 16 healthy subjects while they conducted several grasp and lift trials.


```{r}
library(tidyverse)

train_df <- data_frame(paths = list.files(file.path(data_dir, "train"),
                                          full.names = TRUE),
                       filename = list.files(file.path(data_dir, "train")),
                       subject = str_extract(filename, "(?<=subj)[[:digit:]]+"),
                       series = str_extract(filename, "(?<=series)[[:digit:]]+"),
                       dtype = str_extract(filename, "(?<=_)[[:alpha:]]+(?=.csv)")) %>% 
  filter(subject %in% c(1:2)) %>% 
  mutate(data = map(paths, read_csv),
         data = map(data, ~ .x %>% 
                      mutate(id = as.numeric(str_extract(id, "[[:digit:]]+$"))) %>% 
                      rename(ts = id))) %>% 
  select(-c(paths, filename)) %>% 
  spread(dtype, data) %>% 
  mutate(data = map2(data, events, inner_join, by = "ts")) %>% 
  select(-events) %>% 
  unnest(data)

eeg_vars <- names(train_df)[4:35]
event_vars <- names(train_df)[36:41]
```

I wrote my own function to loop through the data and find the start and end indexes of each event. I decided to use `C++` as it was about thirty times faster when I benchmarked against equivalent `R` code and I've been looking for an excuse to play around with `Rcpp`...

```{Rcpp}
#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
DataFrame StartEndIdxsC(NumericVector x, NumericVector ts) {
  int n = x.size();
  NumericMatrix times(n, 2);
  int j = 0;
  int start_idx = 0;
  
  for(int i = 0; i < n; i++) {
    if (start_idx == 0 && x[i] == 1)
    {
      times(j,0) = ts[i];
      start_idx = 1;
    } 
    else if (start_idx == 1 && x[i] == 0) 
    {
      times(j,1) = ts[i];
      start_idx = 0;
      j = j + 1;
    }
  }
  
  NumericMatrix subset(j,3);
  
  for(int i = 0; i < j; i++) {
    subset(i,0) = i+1;
    subset(i,1) = times(i,0);
    subset(i,2) = times(i,1);
  }
  
  DataFrame df = DataFrame::create(Named("event_idx") = subset(_,0),
                                   Named("start") = subset(_,1),
                                   Named("end") = subset(_,2) );
  
  return df;
}
```


Now I can plot the EEG time series and the event start and end times. Note that the time index is based on 500 Hz sampling.

```{r}
event_times_df <- train_df %>% 
  select(subject, series, ts, !!event_vars) %>% 
  gather(event, val, -c(ts, subject, series)) %>% 
  group_by(subject, series, event) %>%
  nest() %>% 
  mutate(times = map(data, ~ StartEndIdxsC(.$val, .$ts))) %>% 
  select(subject, series, event, times) %>% 
  mutate(event = factor(event, levels = event_vars, ordered = TRUE)) %>% 
  unnest()

plot_event <- function(subject, series, event_idx, sample_buffer = 500) {
  plot_event_df <- event_times_df %>% 
    filter(subject == !!subject,
           series == !!series,
           event_idx == !!event_idx)
  
  plot_eeg_df <- train_df %>% 
    filter(subject == !!subject,
           series == !!series,
           between(ts, min(plot_event_df$start) - sample_buffer,
                   max(plot_event_df$end) + sample_buffer)) %>% 
    select(ts, !!eeg_vars) %>% 
    gather(sensor, val, -ts) %>% 
    mutate(type = str_extract(sensor, "[[:alpha:]]+"))
  
  p <- ggplot() +
    geom_line(data = plot_eeg_df,
              aes(x = ts, y = val, group = sensor)) +
    geom_rect(data = plot_event_df,
              aes(xmin=start, xmax=end, ymin=-Inf, ymax=Inf, fill = event),
              alpha = 0.5) +
    facet_wrap(~type) +
    theme(legend.position = "bottom") +
    labs(title = paste0("Subject: ", subject, "; Series: ", series, 
                        "; Event #: ", event_idx))
  
  p
}

# Plot
plot_event(2, 1, 1)
```


# TODO

* Combine event data so that it is just two columns. ts and event. Check that events don't occur at the same time.
* Once this is done, plot all events as vertical lines in the above plot.